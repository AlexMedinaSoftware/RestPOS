'------------------------------------------------------------------------------
' This is auto-generated code.
'------------------------------------------------------------------------------
' This code was generated by Entity Developer tool using LinqConnect template.
' Code is generated on: 24-03-2020 1:40:26
'
' Changes to this file may cause incorrect behavior and will be lost if
' the code is regenerated.
'------------------------------------------------------------------------------

Imports System
Imports Devart.Data.Linq
Imports Devart.Data.Linq.Mapping
Imports System.Data
Imports System.ComponentModel
Imports System.Collections.Generic
Imports System.Reflection
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Runtime.InteropServices
Namespace MainContext
    <DatabaseAttribute(Name := "main")> _
    <ProviderAttribute(GetType(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))> _
    Public Partial Class MainDataContext
        Inherits Devart.Data.Linq.DataContext

        Public Shared compiledQueryCache As Devart.Data.Linq.CompiledQueryCache = Devart.Data.Linq.CompiledQueryCache.RegisterDataContext(GetType(MainDataContext))
        Private Shared mappingSource As MappingSource = New Devart.Data.Linq.Mapping.AttributeMappingSource()

        #Region "Extensibility Method Definitions"    
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnSubmitError(args As Devart.Data.Linq.SubmitErrorEventArgs)
        End Sub
        Partial Private Sub InsertItem(instance As Item)
        End Sub
        Partial Private Sub UpdateItem(instance As Item)
        End Sub
        Partial Private Sub DeleteItem(instance As Item)
        End Sub
        Partial Private Sub InsertCategory(instance As Category)
        End Sub
        Partial Private Sub UpdateCategory(instance As Category)
        End Sub
        Partial Private Sub DeleteCategory(instance As Category)
        End Sub
        Partial Private Sub InsertTicketsItem(instance As TicketsItem)
        End Sub
        Partial Private Sub UpdateTicketsItem(instance As TicketsItem)
        End Sub
        Partial Private Sub DeleteTicketsItem(instance As TicketsItem)
        End Sub
        Partial Private Sub InsertSector(instance As Sector)
        End Sub
        Partial Private Sub UpdateSector(instance As Sector)
        End Sub
        Partial Private Sub DeleteSector(instance As Sector)
        End Sub
        Partial Private Sub InsertModifier(instance As Modifier)
        End Sub
        Partial Private Sub UpdateModifier(instance As Modifier)
        End Sub
        Partial Private Sub DeleteModifier(instance As Modifier)
        End Sub
        Partial Private Sub InsertTicket(instance As Ticket)
        End Sub
        Partial Private Sub UpdateTicket(instance As Ticket)
        End Sub
        Partial Private Sub DeleteTicket(instance As Ticket)
        End Sub
        Partial Private Sub InsertPersonal(instance As Personal)
        End Sub
        Partial Private Sub UpdatePersonal(instance As Personal)
        End Sub
        Partial Private Sub DeletePersonal(instance As Personal)
        End Sub
        Partial Private Sub InsertCierre(instance As Cierre)
        End Sub
        Partial Private Sub UpdateCierre(instance As Cierre)
        End Sub
        Partial Private Sub DeleteCierre(instance As Cierre)
        End Sub
        Partial Private Sub InsertTable(instance As Table)
        End Sub
        Partial Private Sub UpdateTable(instance As Table)
        End Sub
        Partial Private Sub DeleteTable(instance As Table)
        End Sub
        Partial Private Sub InsertConfig(instance As Config)
        End Sub
        Partial Private Sub UpdateConfig(instance As Config)
        End Sub
        Partial Private Sub DeleteConfig(instance As Config)
        End Sub
        #End Region

       Public Sub New()
            MyBase.New(GetConnectionString("MainDataContextConnectionString"),  mappingSource)
            OnCreated()
        End Sub

       Public Sub New(mappingSource As MappingSource)
            MyBase.New(GetConnectionString("MainDataContextConnectionString"), mappingSource)
            OnCreated()
        End Sub

        Private Shared Function GetConnectionString(ConnectionStringName As String) As String

            Dim Settings As System.Configuration.ConnectionStringSettings
            Settings = System.Configuration.ConfigurationManager.ConnectionStrings.Item(ConnectionStringName)
            If (Settings Is Nothing) Then
                throw new InvalidOperationException("Connection string """ + connectionStringName +""" could not be found in the configuration file.")
            End If
            Return Settings.ConnectionString
        End Function

        Public Sub New(connection As String)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(connection As System.Data.IDbConnection)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(connection As String, mappingSource As MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(connection As System.Data.IDbConnection, mappingSource As MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public ReadOnly Property Items As Devart.Data.Linq.Table(Of Item)
            Get
                Return Me.GetTable(Of Item)()
            End Get
        End Property

        Public ReadOnly Property Categories As Devart.Data.Linq.Table(Of Category)
            Get
                Return Me.GetTable(Of Category)()
            End Get
        End Property

        Public ReadOnly Property TicketsItems As Devart.Data.Linq.Table(Of TicketsItem)
            Get
                Return Me.GetTable(Of TicketsItem)()
            End Get
        End Property

        Public ReadOnly Property Sectors As Devart.Data.Linq.Table(Of Sector)
            Get
                Return Me.GetTable(Of Sector)()
            End Get
        End Property

        Public ReadOnly Property Modifiers As Devart.Data.Linq.Table(Of Modifier)
            Get
                Return Me.GetTable(Of Modifier)()
            End Get
        End Property

        Public ReadOnly Property Tickets As Devart.Data.Linq.Table(Of Ticket)
            Get
                Return Me.GetTable(Of Ticket)()
            End Get
        End Property

        Public ReadOnly Property Personals As Devart.Data.Linq.Table(Of Personal)
            Get
                Return Me.GetTable(Of Personal)()
            End Get
        End Property

        Public ReadOnly Property Cierres As Devart.Data.Linq.Table(Of Cierre)
            Get
                Return Me.GetTable(Of Cierre)()
            End Get
        End Property

        Public ReadOnly Property Tables As Devart.Data.Linq.Table(Of Table)
            Get
                Return Me.GetTable(Of Table)()
            End Get
        End Property

        Public ReadOnly Property Configs As Devart.Data.Linq.Table(Of Config)
            Get
                Return Me.GetTable(Of Config)()
            End Get
        End Property
    End Class
End Namespace

Namespace MainContext

    ''' <summary>
    ''' There are no comments for MainContext.Item in the schema.
    ''' </summary>
    <Table(Name:="""main"".items")> _
    Public Partial Class Item
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(System.String.Empty)

        Private _Id As Long
        Private _Name As String
        Private _Description As String
        Private _SellPrice As Decimal?
        Private _BuyPrice As Decimal?
        Private _CategoryId As Long?
        Private _Barcode As String
        Private _SortOrder As Long?
        Private _StockAmount As Long?
        Private _Tag As String
        Private _BtnColor As String
        Private _LblColor As String
        Private _Visible As Long?    
        #Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIdChanging(value As Long)
        End Sub
        Partial Private Sub OnIdChanged()
        End Sub
        Partial Private Sub OnNameChanging(value As String)
        End Sub
        Partial Private Sub OnNameChanged()
        End Sub
        Partial Private Sub OnDescriptionChanging(value As String)
        End Sub
        Partial Private Sub OnDescriptionChanged()
        End Sub
        Partial Private Sub OnSellPriceChanging(value As Decimal?)
        End Sub
        Partial Private Sub OnSellPriceChanged()
        End Sub
        Partial Private Sub OnBuyPriceChanging(value As Decimal?)
        End Sub
        Partial Private Sub OnBuyPriceChanged()
        End Sub
        Partial Private Sub OnCategoryIdChanging(value As Long?)
        End Sub
        Partial Private Sub OnCategoryIdChanged()
        End Sub
        Partial Private Sub OnBarcodeChanging(value As String)
        End Sub
        Partial Private Sub OnBarcodeChanged()
        End Sub
        Partial Private Sub OnSortOrderChanging(value As Long?)
        End Sub
        Partial Private Sub OnSortOrderChanged()
        End Sub
        Partial Private Sub OnStockAmountChanging(value As Long?)
        End Sub
        Partial Private Sub OnStockAmountChanged()
        End Sub
        Partial Private Sub OnTagChanging(value As String)
        End Sub
        Partial Private Sub OnTagChanged()
        End Sub
        Partial Private Sub OnBtnColorChanging(value As String)
        End Sub
        Partial Private Sub OnBtnColorChanged()
        End Sub
        Partial Private Sub OnLblColorChanging(value As String)
        End Sub
        Partial Private Sub OnLblColorChanged()
        End Sub
        Partial Private Sub OnVisibleChanging(value As Long?)
        End Sub
        Partial Private Sub OnVisibleChanged()
        End Sub
        #End Region

        Public Sub New()
            OnCreated()
        End Sub

        ''' <summary>
        ''' There are no comments for Id in the schema.
        ''' </summary>
        <Column(Name := "id", Storage := "_Id", AutoSync := AutoSync.OnInsert, CanBeNull := false, DbType := "INTEGER NOT NULL", IsDbGenerated := true, IsPrimaryKey := true)> _
        Public ReadOnly Property Id As Long
            Get
                Return Me._Id
            End Get
        End Property

        ''' <summary>
        ''' There are no comments for Name in the schema.
        ''' </summary>
        <Column(Name := "name", Storage := "_Name", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Name As String
            Get
                Return Me._Name
            End Get
            Set

                If (Object.Equals(Me._Name, value) = false) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging("Name")
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Description in the schema.
        ''' </summary>
        <Column(Name := "description", Storage := "_Description", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Description As String
            Get
                Return Me._Description
            End Get
            Set

                If (Object.Equals(Me._Description, value) = false) Then
                    Me.OnDescriptionChanging(value)
                    Me.SendPropertyChanging("Description")
                    Me._Description = value
                    Me.SendPropertyChanged("Description")
                    Me.OnDescriptionChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for SellPrice in the schema.
        ''' </summary>
        <Column(Name := "sellPrice", Storage := "_SellPrice", DbType := "NUMERIC", UpdateCheck := UpdateCheck.Never)> _
        Public Property SellPrice As Decimal?
            Get
                Return Me._SellPrice
            End Get
            Set

                If (Object.Equals(Me._SellPrice, value) = false) Then
                    Me.OnSellPriceChanging(value)
                    Me.SendPropertyChanging("SellPrice")
                    Me._SellPrice = value
                    Me.SendPropertyChanged("SellPrice")
                    Me.OnSellPriceChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for BuyPrice in the schema.
        ''' </summary>
        <Column(Name := "buyPrice", Storage := "_BuyPrice", DbType := "NUMERIC", UpdateCheck := UpdateCheck.Never)> _
        Public Property BuyPrice As Decimal?
            Get
                Return Me._BuyPrice
            End Get
            Set

                If (Object.Equals(Me._BuyPrice, value) = false) Then
                    Me.OnBuyPriceChanging(value)
                    Me.SendPropertyChanging("BuyPrice")
                    Me._BuyPrice = value
                    Me.SendPropertyChanged("BuyPrice")
                    Me.OnBuyPriceChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for CategoryId in the schema.
        ''' </summary>
        <Column(Name := "categoryId", Storage := "_CategoryId", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property CategoryId As Long?
            Get
                Return Me._CategoryId
            End Get
            Set

                If (Object.Equals(Me._CategoryId, value) = false) Then
                    Me.OnCategoryIdChanging(value)
                    Me.SendPropertyChanging("CategoryId")
                    Me._CategoryId = value
                    Me.SendPropertyChanged("CategoryId")
                    Me.OnCategoryIdChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Barcode in the schema.
        ''' </summary>
        <Column(Name := "barcode", Storage := "_Barcode", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Barcode As String
            Get
                Return Me._Barcode
            End Get
            Set

                If (Object.Equals(Me._Barcode, value) = false) Then
                    Me.OnBarcodeChanging(value)
                    Me.SendPropertyChanging("Barcode")
                    Me._Barcode = value
                    Me.SendPropertyChanged("Barcode")
                    Me.OnBarcodeChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for SortOrder in the schema.
        ''' </summary>
        <Column(Name := "sortOrder", Storage := "_SortOrder", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property SortOrder As Long?
            Get
                Return Me._SortOrder
            End Get
            Set

                If (Object.Equals(Me._SortOrder, value) = false) Then
                    Me.OnSortOrderChanging(value)
                    Me.SendPropertyChanging("SortOrder")
                    Me._SortOrder = value
                    Me.SendPropertyChanged("SortOrder")
                    Me.OnSortOrderChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for StockAmount in the schema.
        ''' </summary>
        <Column(Name := "stockAmount", Storage := "_StockAmount", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property StockAmount As Long?
            Get
                Return Me._StockAmount
            End Get
            Set

                If (Object.Equals(Me._StockAmount, value) = false) Then
                    Me.OnStockAmountChanging(value)
                    Me.SendPropertyChanging("StockAmount")
                    Me._StockAmount = value
                    Me.SendPropertyChanged("StockAmount")
                    Me.OnStockAmountChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Tag in the schema.
        ''' </summary>
        <Column(Name := "tag", Storage := "_Tag", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Tag As String
            Get
                Return Me._Tag
            End Get
            Set

                If (Object.Equals(Me._Tag, value) = false) Then
                    Me.OnTagChanging(value)
                    Me.SendPropertyChanging("Tag")
                    Me._Tag = value
                    Me.SendPropertyChanged("Tag")
                    Me.OnTagChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for BtnColor in the schema.
        ''' </summary>
        <Column(Name := "btnColor", Storage := "_BtnColor", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property BtnColor As String
            Get
                Return Me._BtnColor
            End Get
            Set

                If (Object.Equals(Me._BtnColor, value) = false) Then
                    Me.OnBtnColorChanging(value)
                    Me.SendPropertyChanging("BtnColor")
                    Me._BtnColor = value
                    Me.SendPropertyChanged("BtnColor")
                    Me.OnBtnColorChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for LblColor in the schema.
        ''' </summary>
        <Column(Name := "lblColor", Storage := "_LblColor", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property LblColor As String
            Get
                Return Me._LblColor
            End Get
            Set

                If (Object.Equals(Me._LblColor, value) = false) Then
                    Me.OnLblColorChanging(value)
                    Me.SendPropertyChanging("LblColor")
                    Me._LblColor = value
                    Me.SendPropertyChanged("LblColor")
                    Me.OnLblColorChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Visible in the schema.
        ''' </summary>
        <Column(Name := "visible", Storage := "_Visible", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property Visible As Long?
            Get
                Return Me._Visible
            End Get
            Set

                If (Object.Equals(Me._Visible, value) = false) Then
                    Me.OnVisibleChanging(value)
                    Me.SendPropertyChanging("Visible")
                    Me._Visible = value
                    Me.SendPropertyChanged("Visible")
                    Me.OnVisibleChanged()
                End If
            End Set
        End Property
   
        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanging(propertyName As System.String)
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(propertyName As System.String)
            If (Not Me.PropertyChangedEvent Is Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    ''' <summary>
    ''' There are no comments for MainContext.Category in the schema.
    ''' </summary>
    <Table(Name:="""main"".categories")> _
    Public Partial Class Category
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(System.String.Empty)

        Private _Id As Long
        Private _Name As String
        Private _Description As String
        Private _SortOrder As Long?
        Private _Tag As String
        Private _BtnColor As String
        Private _LblColor As String
        Private _Icon As String
        Private _Visible As Long?
        Private _IsLiquid As Long?    
        #Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIdChanging(value As Long)
        End Sub
        Partial Private Sub OnIdChanged()
        End Sub
        Partial Private Sub OnNameChanging(value As String)
        End Sub
        Partial Private Sub OnNameChanged()
        End Sub
        Partial Private Sub OnDescriptionChanging(value As String)
        End Sub
        Partial Private Sub OnDescriptionChanged()
        End Sub
        Partial Private Sub OnSortOrderChanging(value As Long?)
        End Sub
        Partial Private Sub OnSortOrderChanged()
        End Sub
        Partial Private Sub OnTagChanging(value As String)
        End Sub
        Partial Private Sub OnTagChanged()
        End Sub
        Partial Private Sub OnBtnColorChanging(value As String)
        End Sub
        Partial Private Sub OnBtnColorChanged()
        End Sub
        Partial Private Sub OnLblColorChanging(value As String)
        End Sub
        Partial Private Sub OnLblColorChanged()
        End Sub
        Partial Private Sub OnIconChanging(value As String)
        End Sub
        Partial Private Sub OnIconChanged()
        End Sub
        Partial Private Sub OnVisibleChanging(value As Long?)
        End Sub
        Partial Private Sub OnVisibleChanged()
        End Sub
        Partial Private Sub OnIsLiquidChanging(value As Long?)
        End Sub
        Partial Private Sub OnIsLiquidChanged()
        End Sub
        #End Region

        Public Sub New()
            OnCreated()
        End Sub

        ''' <summary>
        ''' There are no comments for Id in the schema.
        ''' </summary>
        <Column(Name := "id", Storage := "_Id", AutoSync := AutoSync.OnInsert, CanBeNull := false, DbType := "INTEGER NOT NULL", IsDbGenerated := true, IsPrimaryKey := true)> _
        Public ReadOnly Property Id As Long
            Get
                Return Me._Id
            End Get
        End Property

        ''' <summary>
        ''' There are no comments for Name in the schema.
        ''' </summary>
        <Column(Name := "name", Storage := "_Name", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Name As String
            Get
                Return Me._Name
            End Get
            Set

                If (Object.Equals(Me._Name, value) = false) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging("Name")
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Description in the schema.
        ''' </summary>
        <Column(Name := "description", Storage := "_Description", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Description As String
            Get
                Return Me._Description
            End Get
            Set

                If (Object.Equals(Me._Description, value) = false) Then
                    Me.OnDescriptionChanging(value)
                    Me.SendPropertyChanging("Description")
                    Me._Description = value
                    Me.SendPropertyChanged("Description")
                    Me.OnDescriptionChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for SortOrder in the schema.
        ''' </summary>
        <Column(Name := "sortOrder", Storage := "_SortOrder", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property SortOrder As Long?
            Get
                Return Me._SortOrder
            End Get
            Set

                If (Object.Equals(Me._SortOrder, value) = false) Then
                    Me.OnSortOrderChanging(value)
                    Me.SendPropertyChanging("SortOrder")
                    Me._SortOrder = value
                    Me.SendPropertyChanged("SortOrder")
                    Me.OnSortOrderChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Tag in the schema.
        ''' </summary>
        <Column(Name := "tag", Storage := "_Tag", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Tag As String
            Get
                Return Me._Tag
            End Get
            Set

                If (Object.Equals(Me._Tag, value) = false) Then
                    Me.OnTagChanging(value)
                    Me.SendPropertyChanging("Tag")
                    Me._Tag = value
                    Me.SendPropertyChanged("Tag")
                    Me.OnTagChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for BtnColor in the schema.
        ''' </summary>
        <Column(Name := "btnColor", Storage := "_BtnColor", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property BtnColor As String
            Get
                Return Me._BtnColor
            End Get
            Set

                If (Object.Equals(Me._BtnColor, value) = false) Then
                    Me.OnBtnColorChanging(value)
                    Me.SendPropertyChanging("BtnColor")
                    Me._BtnColor = value
                    Me.SendPropertyChanged("BtnColor")
                    Me.OnBtnColorChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for LblColor in the schema.
        ''' </summary>
        <Column(Name := "lblColor", Storage := "_LblColor", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property LblColor As String
            Get
                Return Me._LblColor
            End Get
            Set

                If (Object.Equals(Me._LblColor, value) = false) Then
                    Me.OnLblColorChanging(value)
                    Me.SendPropertyChanging("LblColor")
                    Me._LblColor = value
                    Me.SendPropertyChanged("LblColor")
                    Me.OnLblColorChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Icon in the schema.
        ''' </summary>
        <Column(Name := "icon", Storage := "_Icon", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Icon As String
            Get
                Return Me._Icon
            End Get
            Set

                If (Object.Equals(Me._Icon, value) = false) Then
                    Me.OnIconChanging(value)
                    Me.SendPropertyChanging("Icon")
                    Me._Icon = value
                    Me.SendPropertyChanged("Icon")
                    Me.OnIconChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Visible in the schema.
        ''' </summary>
        <Column(Name := "visible", Storage := "_Visible", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property Visible As Long?
            Get
                Return Me._Visible
            End Get
            Set

                If (Object.Equals(Me._Visible, value) = false) Then
                    Me.OnVisibleChanging(value)
                    Me.SendPropertyChanging("Visible")
                    Me._Visible = value
                    Me.SendPropertyChanged("Visible")
                    Me.OnVisibleChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for IsLiquid in the schema.
        ''' </summary>
        <Column(Name := "isLiquid", Storage := "_IsLiquid", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property IsLiquid As Long?
            Get
                Return Me._IsLiquid
            End Get
            Set

                If (Object.Equals(Me._IsLiquid, value) = false) Then
                    Me.OnIsLiquidChanging(value)
                    Me.SendPropertyChanging("IsLiquid")
                    Me._IsLiquid = value
                    Me.SendPropertyChanged("IsLiquid")
                    Me.OnIsLiquidChanged()
                End If
            End Set
        End Property
   
        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanging(propertyName As System.String)
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(propertyName As System.String)
            If (Not Me.PropertyChangedEvent Is Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    ''' <summary>
    ''' There are no comments for MainContext.TicketsItem in the schema.
    ''' </summary>
    <Table(Name:="""main"".tickets_items")> _
    Public Partial Class TicketsItem
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(System.String.Empty)

        Private _Id As Long
        Private _TicketId As Long?
        Private _Name As String
        Private _Price As Decimal?
        Private _Count As Long?
        Private _IsSended As Long?
        Private _SectorId As Long?    
        #Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIdChanging(value As Long)
        End Sub
        Partial Private Sub OnIdChanged()
        End Sub
        Partial Private Sub OnTicketIdChanging(value As Long?)
        End Sub
        Partial Private Sub OnTicketIdChanged()
        End Sub
        Partial Private Sub OnNameChanging(value As String)
        End Sub
        Partial Private Sub OnNameChanged()
        End Sub
        Partial Private Sub OnPriceChanging(value As Decimal?)
        End Sub
        Partial Private Sub OnPriceChanged()
        End Sub
        Partial Private Sub OnCountChanging(value As Long?)
        End Sub
        Partial Private Sub OnCountChanged()
        End Sub
        Partial Private Sub OnIsSendedChanging(value As Long?)
        End Sub
        Partial Private Sub OnIsSendedChanged()
        End Sub
        Partial Private Sub OnSectorIdChanging(value As Long?)
        End Sub
        Partial Private Sub OnSectorIdChanged()
        End Sub
        #End Region

        Public Sub New()
            OnCreated()
        End Sub

        ''' <summary>
        ''' There are no comments for Id in the schema.
        ''' </summary>
        <Column(Name := "id", Storage := "_Id", AutoSync := AutoSync.OnInsert, CanBeNull := false, DbType := "INTEGER NOT NULL", IsDbGenerated := true, IsPrimaryKey := true)> _
        Public ReadOnly Property Id As Long
            Get
                Return Me._Id
            End Get
        End Property

        ''' <summary>
        ''' There are no comments for TicketId in the schema.
        ''' </summary>
        <Column(Name := "ticketId", Storage := "_TicketId", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property TicketId As Long?
            Get
                Return Me._TicketId
            End Get
            Set

                If (Object.Equals(Me._TicketId, value) = false) Then
                    Me.OnTicketIdChanging(value)
                    Me.SendPropertyChanging("TicketId")
                    Me._TicketId = value
                    Me.SendPropertyChanged("TicketId")
                    Me.OnTicketIdChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Name in the schema.
        ''' </summary>
        <Column(Name := "name", Storage := "_Name", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Name As String
            Get
                Return Me._Name
            End Get
            Set

                If (Object.Equals(Me._Name, value) = false) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging("Name")
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Price in the schema.
        ''' </summary>
        <Column(Name := "price", Storage := "_Price", DbType := "NUMERIC", UpdateCheck := UpdateCheck.Never)> _
        Public Property Price As Decimal?
            Get
                Return Me._Price
            End Get
            Set

                If (Object.Equals(Me._Price, value) = false) Then
                    Me.OnPriceChanging(value)
                    Me.SendPropertyChanging("Price")
                    Me._Price = value
                    Me.SendPropertyChanged("Price")
                    Me.OnPriceChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Count in the schema.
        ''' </summary>
        <Column(Name := "count", Storage := "_Count", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property Count As Long?
            Get
                Return Me._Count
            End Get
            Set

                If (Object.Equals(Me._Count, value) = false) Then
                    Me.OnCountChanging(value)
                    Me.SendPropertyChanging("Count")
                    Me._Count = value
                    Me.SendPropertyChanged("Count")
                    Me.OnCountChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for IsSended in the schema.
        ''' </summary>
        <Column(Name := "isSended", Storage := "_IsSended", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property IsSended As Long?
            Get
                Return Me._IsSended
            End Get
            Set

                If (Object.Equals(Me._IsSended, value) = false) Then
                    Me.OnIsSendedChanging(value)
                    Me.SendPropertyChanging("IsSended")
                    Me._IsSended = value
                    Me.SendPropertyChanged("IsSended")
                    Me.OnIsSendedChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for SectorId in the schema.
        ''' </summary>
        <Column(Name := "sectorId", Storage := "_SectorId", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property SectorId As Long?
            Get
                Return Me._SectorId
            End Get
            Set

                If (Object.Equals(Me._SectorId, value) = false) Then
                    Me.OnSectorIdChanging(value)
                    Me.SendPropertyChanging("SectorId")
                    Me._SectorId = value
                    Me.SendPropertyChanged("SectorId")
                    Me.OnSectorIdChanged()
                End If
            End Set
        End Property
   
        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanging(propertyName As System.String)
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(propertyName As System.String)
            If (Not Me.PropertyChangedEvent Is Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    ''' <summary>
    ''' There are no comments for MainContext.Sector in the schema.
    ''' </summary>
    <Table(Name:="""main"".sector")> _
    Public Partial Class Sector
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(System.String.Empty)

        Private _Id As Long
        Private _Name As String
        Private _Description As String
        Private _IsReceipt As Long?
        Private _PrinterName As String    
        #Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIdChanging(value As Long)
        End Sub
        Partial Private Sub OnIdChanged()
        End Sub
        Partial Private Sub OnNameChanging(value As String)
        End Sub
        Partial Private Sub OnNameChanged()
        End Sub
        Partial Private Sub OnDescriptionChanging(value As String)
        End Sub
        Partial Private Sub OnDescriptionChanged()
        End Sub
        Partial Private Sub OnIsReceiptChanging(value As Long?)
        End Sub
        Partial Private Sub OnIsReceiptChanged()
        End Sub
        Partial Private Sub OnPrinterNameChanging(value As String)
        End Sub
        Partial Private Sub OnPrinterNameChanged()
        End Sub
        #End Region

        Public Sub New()
            OnCreated()
        End Sub

        ''' <summary>
        ''' There are no comments for Id in the schema.
        ''' </summary>
        <Column(Name := "id", Storage := "_Id", AutoSync := AutoSync.OnInsert, CanBeNull := false, DbType := "INTEGER NOT NULL", IsDbGenerated := true, IsPrimaryKey := true)> _
        Public ReadOnly Property Id As Long
            Get
                Return Me._Id
            End Get
        End Property

        ''' <summary>
        ''' There are no comments for Name in the schema.
        ''' </summary>
        <Column(Name := "name", Storage := "_Name", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Name As String
            Get
                Return Me._Name
            End Get
            Set

                If (Object.Equals(Me._Name, value) = false) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging("Name")
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Description in the schema.
        ''' </summary>
        <Column(Name := "description", Storage := "_Description", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Description As String
            Get
                Return Me._Description
            End Get
            Set

                If (Object.Equals(Me._Description, value) = false) Then
                    Me.OnDescriptionChanging(value)
                    Me.SendPropertyChanging("Description")
                    Me._Description = value
                    Me.SendPropertyChanged("Description")
                    Me.OnDescriptionChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for IsReceipt in the schema.
        ''' </summary>
        <Column(Name := "isReceipt", Storage := "_IsReceipt", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property IsReceipt As Long?
            Get
                Return Me._IsReceipt
            End Get
            Set

                If (Object.Equals(Me._IsReceipt, value) = false) Then
                    Me.OnIsReceiptChanging(value)
                    Me.SendPropertyChanging("IsReceipt")
                    Me._IsReceipt = value
                    Me.SendPropertyChanged("IsReceipt")
                    Me.OnIsReceiptChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for PrinterName in the schema.
        ''' </summary>
        <Column(Name := "printerName", Storage := "_PrinterName", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property PrinterName As String
            Get
                Return Me._PrinterName
            End Get
            Set

                If (Object.Equals(Me._PrinterName, value) = false) Then
                    Me.OnPrinterNameChanging(value)
                    Me.SendPropertyChanging("PrinterName")
                    Me._PrinterName = value
                    Me.SendPropertyChanged("PrinterName")
                    Me.OnPrinterNameChanged()
                End If
            End Set
        End Property
   
        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanging(propertyName As System.String)
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(propertyName As System.String)
            If (Not Me.PropertyChangedEvent Is Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    ''' <summary>
    ''' There are no comments for MainContext.Modifier in the schema.
    ''' </summary>
    <Table(Name:="""main"".modifiers")> _
    Public Partial Class Modifier
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(System.String.Empty)

        Private _Id As Long
        Private _Name As String
        Private _Price As Decimal?
        Private _CategoryId As Long?    
        #Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIdChanging(value As Long)
        End Sub
        Partial Private Sub OnIdChanged()
        End Sub
        Partial Private Sub OnNameChanging(value As String)
        End Sub
        Partial Private Sub OnNameChanged()
        End Sub
        Partial Private Sub OnPriceChanging(value As Decimal?)
        End Sub
        Partial Private Sub OnPriceChanged()
        End Sub
        Partial Private Sub OnCategoryIdChanging(value As Long?)
        End Sub
        Partial Private Sub OnCategoryIdChanged()
        End Sub
        #End Region

        Public Sub New()
            OnCreated()
        End Sub

        ''' <summary>
        ''' There are no comments for Id in the schema.
        ''' </summary>
        <Column(Name := "id", Storage := "_Id", AutoSync := AutoSync.OnInsert, CanBeNull := false, DbType := "INTEGER NOT NULL", IsDbGenerated := true, IsPrimaryKey := true)> _
        Public ReadOnly Property Id As Long
            Get
                Return Me._Id
            End Get
        End Property

        ''' <summary>
        ''' There are no comments for Name in the schema.
        ''' </summary>
        <Column(Name := "name", Storage := "_Name", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Name As String
            Get
                Return Me._Name
            End Get
            Set

                If (Object.Equals(Me._Name, value) = false) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging("Name")
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Price in the schema.
        ''' </summary>
        <Column(Name := "price", Storage := "_Price", DbType := "NUMERIC", UpdateCheck := UpdateCheck.Never)> _
        Public Property Price As Decimal?
            Get
                Return Me._Price
            End Get
            Set

                If (Object.Equals(Me._Price, value) = false) Then
                    Me.OnPriceChanging(value)
                    Me.SendPropertyChanging("Price")
                    Me._Price = value
                    Me.SendPropertyChanged("Price")
                    Me.OnPriceChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for CategoryId in the schema.
        ''' </summary>
        <Column(Name := "categoryId", Storage := "_CategoryId", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property CategoryId As Long?
            Get
                Return Me._CategoryId
            End Get
            Set

                If (Object.Equals(Me._CategoryId, value) = false) Then
                    Me.OnCategoryIdChanging(value)
                    Me.SendPropertyChanging("CategoryId")
                    Me._CategoryId = value
                    Me.SendPropertyChanged("CategoryId")
                    Me.OnCategoryIdChanged()
                End If
            End Set
        End Property
   
        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanging(propertyName As System.String)
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(propertyName As System.String)
            If (Not Me.PropertyChangedEvent Is Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    ''' <summary>
    ''' There are no comments for MainContext.Ticket in the schema.
    ''' </summary>
    <Table(Name:="""main"".tickets")> _
    Public Partial Class Ticket
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(System.String.Empty)

        Private _Id As Long
        Private _OpenTime As String
        Private _CloseTime As String
        Private _IsOpen As Long?
        Private _TableId As Long?
        Private _ItemsCount As Long?
        Private _Total As Decimal?
        Private _Propina As Decimal?
        Private _IsDayOut As Long?
        Private _TerminalId As Long?
        Private _Paid As Decimal?
        Private _Canceled As Long?
        Private _PaidType As Long?
        Private _PersonalID As Long?    
        #Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIdChanging(value As Long)
        End Sub
        Partial Private Sub OnIdChanged()
        End Sub
        Partial Private Sub OnOpenTimeChanging(value As String)
        End Sub
        Partial Private Sub OnOpenTimeChanged()
        End Sub
        Partial Private Sub OnCloseTimeChanging(value As String)
        End Sub
        Partial Private Sub OnCloseTimeChanged()
        End Sub
        Partial Private Sub OnIsOpenChanging(value As Long?)
        End Sub
        Partial Private Sub OnIsOpenChanged()
        End Sub
        Partial Private Sub OnTableIdChanging(value As Long?)
        End Sub
        Partial Private Sub OnTableIdChanged()
        End Sub
        Partial Private Sub OnItemsCountChanging(value As Long?)
        End Sub
        Partial Private Sub OnItemsCountChanged()
        End Sub
        Partial Private Sub OnTotalChanging(value As Decimal?)
        End Sub
        Partial Private Sub OnTotalChanged()
        End Sub
        Partial Private Sub OnPropinaChanging(value As Decimal?)
        End Sub
        Partial Private Sub OnPropinaChanged()
        End Sub
        Partial Private Sub OnIsDayOutChanging(value As Long?)
        End Sub
        Partial Private Sub OnIsDayOutChanged()
        End Sub
        Partial Private Sub OnTerminalIdChanging(value As Long?)
        End Sub
        Partial Private Sub OnTerminalIdChanged()
        End Sub
        Partial Private Sub OnPaidChanging(value As Decimal?)
        End Sub
        Partial Private Sub OnPaidChanged()
        End Sub
        Partial Private Sub OnCanceledChanging(value As Long?)
        End Sub
        Partial Private Sub OnCanceledChanged()
        End Sub
        Partial Private Sub OnPaidTypeChanging(value As Long?)
        End Sub
        Partial Private Sub OnPaidTypeChanged()
        End Sub
        Partial Private Sub OnPersonalIDChanging(value As Long?)
        End Sub
        Partial Private Sub OnPersonalIDChanged()
        End Sub
        #End Region

        Public Sub New()
            OnCreated()
        End Sub

        ''' <summary>
        ''' There are no comments for Id in the schema.
        ''' </summary>
        <Column(Name := "id", Storage := "_Id", AutoSync := AutoSync.OnInsert, CanBeNull := false, DbType := "INTEGER NOT NULL", IsDbGenerated := true, IsPrimaryKey := true)> _
        Public ReadOnly Property Id As Long
            Get
                Return Me._Id
            End Get
        End Property

        ''' <summary>
        ''' There are no comments for OpenTime in the schema.
        ''' </summary>
        <Column(Name := "openTime", Storage := "_OpenTime", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property OpenTime As String
            Get
                Return Me._OpenTime
            End Get
            Set

                If (Object.Equals(Me._OpenTime, value) = false) Then
                    Me.OnOpenTimeChanging(value)
                    Me.SendPropertyChanging("OpenTime")
                    Me._OpenTime = value
                    Me.SendPropertyChanged("OpenTime")
                    Me.OnOpenTimeChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for CloseTime in the schema.
        ''' </summary>
        <Column(Name := "closeTime", Storage := "_CloseTime", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property CloseTime As String
            Get
                Return Me._CloseTime
            End Get
            Set

                If (Object.Equals(Me._CloseTime, value) = false) Then
                    Me.OnCloseTimeChanging(value)
                    Me.SendPropertyChanging("CloseTime")
                    Me._CloseTime = value
                    Me.SendPropertyChanged("CloseTime")
                    Me.OnCloseTimeChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for IsOpen in the schema.
        ''' </summary>
        <Column(Name := "isOpen", Storage := "_IsOpen", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property IsOpen As Long?
            Get
                Return Me._IsOpen
            End Get
            Set

                If (Object.Equals(Me._IsOpen, value) = false) Then
                    Me.OnIsOpenChanging(value)
                    Me.SendPropertyChanging("IsOpen")
                    Me._IsOpen = value
                    Me.SendPropertyChanged("IsOpen")
                    Me.OnIsOpenChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for TableId in the schema.
        ''' </summary>
        <Column(Name := "tableId", Storage := "_TableId", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property TableId As Long?
            Get
                Return Me._TableId
            End Get
            Set

                If (Object.Equals(Me._TableId, value) = false) Then
                    Me.OnTableIdChanging(value)
                    Me.SendPropertyChanging("TableId")
                    Me._TableId = value
                    Me.SendPropertyChanged("TableId")
                    Me.OnTableIdChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for ItemsCount in the schema.
        ''' </summary>
        <Column(Name := "itemsCount", Storage := "_ItemsCount", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property ItemsCount As Long?
            Get
                Return Me._ItemsCount
            End Get
            Set

                If (Object.Equals(Me._ItemsCount, value) = false) Then
                    Me.OnItemsCountChanging(value)
                    Me.SendPropertyChanging("ItemsCount")
                    Me._ItemsCount = value
                    Me.SendPropertyChanged("ItemsCount")
                    Me.OnItemsCountChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Total in the schema.
        ''' </summary>
        <Column(Name := "total", Storage := "_Total", DbType := "NUMERIC", UpdateCheck := UpdateCheck.Never)> _
        Public Property Total As Decimal?
            Get
                Return Me._Total
            End Get
            Set

                If (Object.Equals(Me._Total, value) = false) Then
                    Me.OnTotalChanging(value)
                    Me.SendPropertyChanging("Total")
                    Me._Total = value
                    Me.SendPropertyChanged("Total")
                    Me.OnTotalChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Propina in the schema.
        ''' </summary>
        <Column(Name := "propina", Storage := "_Propina", DbType := "NUMERIC", UpdateCheck := UpdateCheck.Never)> _
        Public Property Propina As Decimal?
            Get
                Return Me._Propina
            End Get
            Set

                If (Object.Equals(Me._Propina, value) = false) Then
                    Me.OnPropinaChanging(value)
                    Me.SendPropertyChanging("Propina")
                    Me._Propina = value
                    Me.SendPropertyChanged("Propina")
                    Me.OnPropinaChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for IsDayOut in the schema.
        ''' </summary>
        <Column(Name := "isDayOut", Storage := "_IsDayOut", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property IsDayOut As Long?
            Get
                Return Me._IsDayOut
            End Get
            Set

                If (Object.Equals(Me._IsDayOut, value) = false) Then
                    Me.OnIsDayOutChanging(value)
                    Me.SendPropertyChanging("IsDayOut")
                    Me._IsDayOut = value
                    Me.SendPropertyChanged("IsDayOut")
                    Me.OnIsDayOutChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for TerminalId in the schema.
        ''' </summary>
        <Column(Name := "terminalId", Storage := "_TerminalId", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property TerminalId As Long?
            Get
                Return Me._TerminalId
            End Get
            Set

                If (Object.Equals(Me._TerminalId, value) = false) Then
                    Me.OnTerminalIdChanging(value)
                    Me.SendPropertyChanging("TerminalId")
                    Me._TerminalId = value
                    Me.SendPropertyChanged("TerminalId")
                    Me.OnTerminalIdChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Paid in the schema.
        ''' </summary>
        <Column(Name := "paid", Storage := "_Paid", DbType := "NUMERIC", UpdateCheck := UpdateCheck.Never)> _
        Public Property Paid As Decimal?
            Get
                Return Me._Paid
            End Get
            Set

                If (Object.Equals(Me._Paid, value) = false) Then
                    Me.OnPaidChanging(value)
                    Me.SendPropertyChanging("Paid")
                    Me._Paid = value
                    Me.SendPropertyChanged("Paid")
                    Me.OnPaidChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Canceled in the schema.
        ''' </summary>
        <Column(Name := "canceled", Storage := "_Canceled", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property Canceled As Long?
            Get
                Return Me._Canceled
            End Get
            Set

                If (Object.Equals(Me._Canceled, value) = false) Then
                    Me.OnCanceledChanging(value)
                    Me.SendPropertyChanging("Canceled")
                    Me._Canceled = value
                    Me.SendPropertyChanged("Canceled")
                    Me.OnCanceledChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for PaidType in the schema.
        ''' </summary>
        <Column(Name := "paidType", Storage := "_PaidType", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property PaidType As Long?
            Get
                Return Me._PaidType
            End Get
            Set

                If (Object.Equals(Me._PaidType, value) = false) Then
                    Me.OnPaidTypeChanging(value)
                    Me.SendPropertyChanging("PaidType")
                    Me._PaidType = value
                    Me.SendPropertyChanged("PaidType")
                    Me.OnPaidTypeChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for PersonalID in the schema.
        ''' </summary>
        <Column(Name := "personalID", Storage := "_PersonalID", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property PersonalID As Long?
            Get
                Return Me._PersonalID
            End Get
            Set

                If (Object.Equals(Me._PersonalID, value) = false) Then
                    Me.OnPersonalIDChanging(value)
                    Me.SendPropertyChanging("PersonalID")
                    Me._PersonalID = value
                    Me.SendPropertyChanged("PersonalID")
                    Me.OnPersonalIDChanged()
                End If
            End Set
        End Property
   
        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanging(propertyName As System.String)
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(propertyName As System.String)
            If (Not Me.PropertyChangedEvent Is Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    ''' <summary>
    ''' There are no comments for MainContext.Personal in the schema.
    ''' </summary>
    <Table(Name:="""main"".personal")> _
    Public Partial Class Personal
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(System.String.Empty)

        Private _Id As Long
        Private _Name As String
        Private _Icon As String
        Private _Color As String
        Private _IsAdmin As Long?
        Private _Pass As String    
        #Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIdChanging(value As Long)
        End Sub
        Partial Private Sub OnIdChanged()
        End Sub
        Partial Private Sub OnNameChanging(value As String)
        End Sub
        Partial Private Sub OnNameChanged()
        End Sub
        Partial Private Sub OnIconChanging(value As String)
        End Sub
        Partial Private Sub OnIconChanged()
        End Sub
        Partial Private Sub OnColorChanging(value As String)
        End Sub
        Partial Private Sub OnColorChanged()
        End Sub
        Partial Private Sub OnIsAdminChanging(value As Long?)
        End Sub
        Partial Private Sub OnIsAdminChanged()
        End Sub
        Partial Private Sub OnPassChanging(value As String)
        End Sub
        Partial Private Sub OnPassChanged()
        End Sub
        #End Region

        Public Sub New()
            OnCreated()
        End Sub

        ''' <summary>
        ''' There are no comments for Id in the schema.
        ''' </summary>
        <Column(Name := "id", Storage := "_Id", AutoSync := AutoSync.OnInsert, CanBeNull := false, DbType := "INTEGER NOT NULL", IsDbGenerated := true, IsPrimaryKey := true)> _
        Public ReadOnly Property Id As Long
            Get
                Return Me._Id
            End Get
        End Property

        ''' <summary>
        ''' There are no comments for Name in the schema.
        ''' </summary>
        <Column(Name := "name", Storage := "_Name", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Name As String
            Get
                Return Me._Name
            End Get
            Set

                If (Object.Equals(Me._Name, value) = false) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging("Name")
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Icon in the schema.
        ''' </summary>
        <Column(Name := "icon", Storage := "_Icon", CanBeNull := false, DbType := "TEXT NOT NULL", UpdateCheck := UpdateCheck.Never)> _
        Public Property Icon As String
            Get
                Return Me._Icon
            End Get
            Set

                If (Object.Equals(Me._Icon, value) = false) Then
                    Me.OnIconChanging(value)
                    Me.SendPropertyChanging("Icon")
                    Me._Icon = value
                    Me.SendPropertyChanged("Icon")
                    Me.OnIconChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Color in the schema.
        ''' </summary>
        <Column(Name := "color", Storage := "_Color", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Color As String
            Get
                Return Me._Color
            End Get
            Set

                If (Object.Equals(Me._Color, value) = false) Then
                    Me.OnColorChanging(value)
                    Me.SendPropertyChanging("Color")
                    Me._Color = value
                    Me.SendPropertyChanged("Color")
                    Me.OnColorChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for IsAdmin in the schema.
        ''' </summary>
        <Column(Name := "isAdmin", Storage := "_IsAdmin", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property IsAdmin As Long?
            Get
                Return Me._IsAdmin
            End Get
            Set

                If (Object.Equals(Me._IsAdmin, value) = false) Then
                    Me.OnIsAdminChanging(value)
                    Me.SendPropertyChanging("IsAdmin")
                    Me._IsAdmin = value
                    Me.SendPropertyChanged("IsAdmin")
                    Me.OnIsAdminChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Pass in the schema.
        ''' </summary>
        <Column(Name := "pass", Storage := "_Pass", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Pass As String
            Get
                Return Me._Pass
            End Get
            Set

                If (Object.Equals(Me._Pass, value) = false) Then
                    Me.OnPassChanging(value)
                    Me.SendPropertyChanging("Pass")
                    Me._Pass = value
                    Me.SendPropertyChanged("Pass")
                    Me.OnPassChanged()
                End If
            End Set
        End Property
   
        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanging(propertyName As System.String)
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(propertyName As System.String)
            If (Not Me.PropertyChangedEvent Is Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    ''' <summary>
    ''' There are no comments for MainContext.Cierre in the schema.
    ''' </summary>
    <Table(Name:="""main"".cierres")> _
    Public Partial Class Cierre
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(System.String.Empty)

        Private _Id As Long
        Private _Fecha As String
        Private _Total As Decimal?
        Private _Propina As Decimal?
        Private _TotalEfectivo As Decimal?
        Private _TotalTBK As Decimal?
        Private _TotalTransferencia As Decimal?    
        #Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIdChanging(value As Long)
        End Sub
        Partial Private Sub OnIdChanged()
        End Sub
        Partial Private Sub OnFechaChanging(value As String)
        End Sub
        Partial Private Sub OnFechaChanged()
        End Sub
        Partial Private Sub OnTotalChanging(value As Decimal?)
        End Sub
        Partial Private Sub OnTotalChanged()
        End Sub
        Partial Private Sub OnPropinaChanging(value As Decimal?)
        End Sub
        Partial Private Sub OnPropinaChanged()
        End Sub
        Partial Private Sub OnTotalEfectivoChanging(value As Decimal?)
        End Sub
        Partial Private Sub OnTotalEfectivoChanged()
        End Sub
        Partial Private Sub OnTotalTBKChanging(value As Decimal?)
        End Sub
        Partial Private Sub OnTotalTBKChanged()
        End Sub
        Partial Private Sub OnTotalTransferenciaChanging(value As Decimal?)
        End Sub
        Partial Private Sub OnTotalTransferenciaChanged()
        End Sub
        #End Region

        Public Sub New()
            OnCreated()
        End Sub

        ''' <summary>
        ''' There are no comments for Id in the schema.
        ''' </summary>
        <Column(Name := "id", Storage := "_Id", AutoSync := AutoSync.OnInsert, CanBeNull := false, DbType := "INTEGER NOT NULL", IsDbGenerated := true, IsPrimaryKey := true)> _
        Public ReadOnly Property Id As Long
            Get
                Return Me._Id
            End Get
        End Property

        ''' <summary>
        ''' There are no comments for Fecha in the schema.
        ''' </summary>
        <Column(Name := "fecha", Storage := "_Fecha", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Fecha As String
            Get
                Return Me._Fecha
            End Get
            Set

                If (Object.Equals(Me._Fecha, value) = false) Then
                    Me.OnFechaChanging(value)
                    Me.SendPropertyChanging("Fecha")
                    Me._Fecha = value
                    Me.SendPropertyChanged("Fecha")
                    Me.OnFechaChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Total in the schema.
        ''' </summary>
        <Column(Name := "total", Storage := "_Total", DbType := "NUMERIC", UpdateCheck := UpdateCheck.Never)> _
        Public Property Total As Decimal?
            Get
                Return Me._Total
            End Get
            Set

                If (Object.Equals(Me._Total, value) = false) Then
                    Me.OnTotalChanging(value)
                    Me.SendPropertyChanging("Total")
                    Me._Total = value
                    Me.SendPropertyChanged("Total")
                    Me.OnTotalChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Propina in the schema.
        ''' </summary>
        <Column(Name := "propina", Storage := "_Propina", DbType := "NUMERIC", UpdateCheck := UpdateCheck.Never)> _
        Public Property Propina As Decimal?
            Get
                Return Me._Propina
            End Get
            Set

                If (Object.Equals(Me._Propina, value) = false) Then
                    Me.OnPropinaChanging(value)
                    Me.SendPropertyChanging("Propina")
                    Me._Propina = value
                    Me.SendPropertyChanged("Propina")
                    Me.OnPropinaChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for TotalEfectivo in the schema.
        ''' </summary>
        <Column(Name := "totalEfectivo", Storage := "_TotalEfectivo", DbType := "NUMERIC", UpdateCheck := UpdateCheck.Never)> _
        Public Property TotalEfectivo As Decimal?
            Get
                Return Me._TotalEfectivo
            End Get
            Set

                If (Object.Equals(Me._TotalEfectivo, value) = false) Then
                    Me.OnTotalEfectivoChanging(value)
                    Me.SendPropertyChanging("TotalEfectivo")
                    Me._TotalEfectivo = value
                    Me.SendPropertyChanged("TotalEfectivo")
                    Me.OnTotalEfectivoChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for TotalTBK in the schema.
        ''' </summary>
        <Column(Name := "totalTBK", Storage := "_TotalTBK", DbType := "NUMERIC", UpdateCheck := UpdateCheck.Never)> _
        Public Property TotalTBK As Decimal?
            Get
                Return Me._TotalTBK
            End Get
            Set

                If (Object.Equals(Me._TotalTBK, value) = false) Then
                    Me.OnTotalTBKChanging(value)
                    Me.SendPropertyChanging("TotalTBK")
                    Me._TotalTBK = value
                    Me.SendPropertyChanged("TotalTBK")
                    Me.OnTotalTBKChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for TotalTransferencia in the schema.
        ''' </summary>
        <Column(Name := "totalTransferencia", Storage := "_TotalTransferencia", DbType := "NUMERIC", UpdateCheck := UpdateCheck.Never)> _
        Public Property TotalTransferencia As Decimal?
            Get
                Return Me._TotalTransferencia
            End Get
            Set

                If (Object.Equals(Me._TotalTransferencia, value) = false) Then
                    Me.OnTotalTransferenciaChanging(value)
                    Me.SendPropertyChanging("TotalTransferencia")
                    Me._TotalTransferencia = value
                    Me.SendPropertyChanged("TotalTransferencia")
                    Me.OnTotalTransferenciaChanged()
                End If
            End Set
        End Property
   
        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanging(propertyName As System.String)
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(propertyName As System.String)
            If (Not Me.PropertyChangedEvent Is Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    ''' <summary>
    ''' There are no comments for MainContext.Table in the schema.
    ''' </summary>
    <Table(Name:="""main"".tables")> _
    Public Partial Class Table
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(System.String.Empty)

        Private _Id As Long
        Private _Name As String
        Private _Description As String
        Private _Capacity As Long?
        Private _Visible As Long?
        Private _Color As String    
        #Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIdChanging(value As Long)
        End Sub
        Partial Private Sub OnIdChanged()
        End Sub
        Partial Private Sub OnNameChanging(value As String)
        End Sub
        Partial Private Sub OnNameChanged()
        End Sub
        Partial Private Sub OnDescriptionChanging(value As String)
        End Sub
        Partial Private Sub OnDescriptionChanged()
        End Sub
        Partial Private Sub OnCapacityChanging(value As Long?)
        End Sub
        Partial Private Sub OnCapacityChanged()
        End Sub
        Partial Private Sub OnVisibleChanging(value As Long?)
        End Sub
        Partial Private Sub OnVisibleChanged()
        End Sub
        Partial Private Sub OnColorChanging(value As String)
        End Sub
        Partial Private Sub OnColorChanged()
        End Sub
        #End Region

        Public Sub New()
            OnCreated()
        End Sub

        ''' <summary>
        ''' There are no comments for Id in the schema.
        ''' </summary>
        <Column(Name := "id", Storage := "_Id", AutoSync := AutoSync.OnInsert, CanBeNull := false, DbType := "INTEGER NOT NULL", IsDbGenerated := true, IsPrimaryKey := true)> _
        Public ReadOnly Property Id As Long
            Get
                Return Me._Id
            End Get
        End Property

        ''' <summary>
        ''' There are no comments for Name in the schema.
        ''' </summary>
        <Column(Name := "name", Storage := "_Name", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Name As String
            Get
                Return Me._Name
            End Get
            Set

                If (Object.Equals(Me._Name, value) = false) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging("Name")
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Description in the schema.
        ''' </summary>
        <Column(Name := "description", Storage := "_Description", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Description As String
            Get
                Return Me._Description
            End Get
            Set

                If (Object.Equals(Me._Description, value) = false) Then
                    Me.OnDescriptionChanging(value)
                    Me.SendPropertyChanging("Description")
                    Me._Description = value
                    Me.SendPropertyChanged("Description")
                    Me.OnDescriptionChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Capacity in the schema.
        ''' </summary>
        <Column(Name := "capacity", Storage := "_Capacity", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property Capacity As Long?
            Get
                Return Me._Capacity
            End Get
            Set

                If (Object.Equals(Me._Capacity, value) = false) Then
                    Me.OnCapacityChanging(value)
                    Me.SendPropertyChanging("Capacity")
                    Me._Capacity = value
                    Me.SendPropertyChanged("Capacity")
                    Me.OnCapacityChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Visible in the schema.
        ''' </summary>
        <Column(Name := "visible", Storage := "_Visible", DbType := "INTEGER", UpdateCheck := UpdateCheck.Never)> _
        Public Property Visible As Long?
            Get
                Return Me._Visible
            End Get
            Set

                If (Object.Equals(Me._Visible, value) = false) Then
                    Me.OnVisibleChanging(value)
                    Me.SendPropertyChanging("Visible")
                    Me._Visible = value
                    Me.SendPropertyChanged("Visible")
                    Me.OnVisibleChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Color in the schema.
        ''' </summary>
        <Column(Name := "color", Storage := "_Color", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Color As String
            Get
                Return Me._Color
            End Get
            Set

                If (Object.Equals(Me._Color, value) = false) Then
                    Me.OnColorChanging(value)
                    Me.SendPropertyChanging("Color")
                    Me._Color = value
                    Me.SendPropertyChanged("Color")
                    Me.OnColorChanged()
                End If
            End Set
        End Property
   
        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanging(propertyName As System.String)
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(propertyName As System.String)
            If (Not Me.PropertyChangedEvent Is Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    ''' <summary>
    ''' There are no comments for MainContext.Config in the schema.
    ''' </summary>
    <Table(Name:="""main"".config")> _
    Public Partial Class Config
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(System.String.Empty)

        Private _Id As Long
        Private _Property As String
        Private _Value As String    
        #Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIdChanging(value As Long)
        End Sub
        Partial Private Sub OnIdChanged()
        End Sub
        Partial Private Sub OnPropertyChanging(value As String)
        End Sub
        Partial Private Sub OnPropertyChanged()
        End Sub
        Partial Private Sub OnValueChanging(value As String)
        End Sub
        Partial Private Sub OnValueChanged()
        End Sub
        #End Region

        Public Sub New()
            OnCreated()
        End Sub

        ''' <summary>
        ''' There are no comments for Id in the schema.
        ''' </summary>
        <Column(Name := "id", Storage := "_Id", AutoSync := AutoSync.OnInsert, CanBeNull := false, DbType := "INTEGER NOT NULL", IsDbGenerated := true, IsPrimaryKey := true)> _
        Public ReadOnly Property Id As Long
            Get
                Return Me._Id
            End Get
        End Property

        ''' <summary>
        ''' There are no comments for Property in the schema.
        ''' </summary>
        <Column(Name := "property", Storage := "_Property", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property [Property] As String
            Get
                Return Me._Property
            End Get
            Set

                If (Object.Equals(Me._Property, value) = false) Then
                    Me.OnPropertyChanging(value)
                    Me.SendPropertyChanging("[Property]")
                    Me._Property = value
                    Me.SendPropertyChanged("[Property]")
                    Me.OnPropertyChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Value in the schema.
        ''' </summary>
        <Column(Name := "value", Storage := "_Value", DbType := "TEXT", UpdateCheck := UpdateCheck.Never)> _
        Public Property Value As String
            Get
                Return Me._Value
            End Get
            Set

                If (Object.Equals(Me._Value, value) = false) Then
                    Me.OnValueChanging(value)
                    Me.SendPropertyChanging("Value")
                    Me._Value = value
                    Me.SendPropertyChanged("Value")
                    Me.OnValueChanged()
                End If
            End Set
        End Property
   
        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanging(propertyName As System.String)
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(propertyName As System.String)
            If (Not Me.PropertyChangedEvent Is Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

End Namespace
